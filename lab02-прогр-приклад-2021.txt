#include <fstream>
#include <iostream>

using namespace std;

typedef uint16_t WORD;
typedef uint32_t DWORD;
typedef int32_t LONG;
//щоб уникнути округлення розміру структури до максимального
//4х-байтного розміру
#pragma pack(push,1)
struct BitmapFileHeader {
  WORD  bfType;
  DWORD bfSize;
  WORD  bfReserved1;
  WORD  bfReserved2;
  DWORD bfOffBits;
};
#pragma pack(push,1)
struct BitmapInfoHeader {
  DWORD biSize;
  LONG  biWidth;
  LONG  biHeight;
  WORD  biPlanes;
  WORD  biBitCount;
  DWORD biCompression;
  DWORD biSizeImage;
  LONG  biXPelsPerMeter;
  LONG  biYPelsPerMeter;
  DWORD biClrUsed;
  DWORD biClrImportant;
};

//створення .bmp файла
//задання параметрів полям заголовка .bmp файла і зображення
void CreateBmp(const char *fileName, unsigned int **colors , int height, int width)
{
    BitmapFileHeader bfh = {0};
    BitmapInfoHeader bih = {0};

    bfh.bfType = 0x4D42; //символи 'BM'
    bfh.bfOffBits = sizeof(bfh) + sizeof(bih); //
    bfh.bfSize =bfh.bfOffBits + sizeof(colors[0][0])*width*height;
	// розмір кінцевого файлу

    bih.biSize = sizeof(bih); // розмір структури
    bih.biBitCount = 32;      // 32 біт (4 байта) на піксель
    bih.biHeight = -height;   // Висота
    bih.biWidth = width;      // Ширина
    bih.biPlanes = 1;         // містить 1
    // інші поля дорівнюють нулю

    ofstream f;
    f.open(fileName, ios::binary); // Відкриваємо файл для запису

    f.write((char*)&bfh, sizeof(bfh)); // Записуємо заголовки
    f.write((char*)&bih, sizeof(bih));

    // Записуємо зображення
    for (int i = 0; i < height; i++)
        f.write((char*)colors[i], sizeof(colors[0][0]) * width);

    f.close(); // Закриваємо файл
}
#pragma pack (pop)

int main(int argc, char* argv[])
{
    int w = 0, h = 0;
    cout << "Input height in px" << endl;
    cin >> h;
    cout << "Input width in px" << endl;
    cin >> w;

    unsigned int** color = new unsigned int*[h];
    for (int i = 0; i < h; i++)
        color[i] = new unsigned int[w];

    for (int i = 0; i < h; i++)
      for (int j = 0; j < w; j++)
        color[i][j] = 0xFF0000; //задання червоного коліру

    CreateBmp("test.bmp",color, h, w);

    for (int i = 0; i < h; i++)
        delete []color[i];
    delete []color;
    cout << "test.bmp has been successfully created; Press Enter to exit";
    cin.ignore(2);//
    return 0;
}
